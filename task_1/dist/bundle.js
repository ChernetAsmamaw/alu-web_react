!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t),n.d(t,"printTeacher",(function(){return r})),n.d(t,"StudentClass",(function(){return o}));console.log({firstName:"John",lastName:"Doe",age:30,fullTimeEmployee:!0,yearsOfExperience:3,location:"Toronto",contract:!1});console.log({firstName:"Jane",lastName:"Smith",age:45,fullTimeEmployee:!0,yearsOfExperience:20,location:"Vancouver",numberOfReports:4});var r=function(e,t){return e.charAt(0)+". "+t};console.log(r("John","Doe"));var o=function(){function e(e,t){this.firstName=e,this.lastName=t}return e.prototype.workOnHomework=function(){return"Currently working"},e.prototype.displayName=function(){return this.firstName},e}(),u=new o("John","Doe");console.log(u.displayName(),u.workOnHomework(),u.firstName,u.lastName)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,